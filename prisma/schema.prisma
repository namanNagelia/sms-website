generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BI_ORG {
  BI_Org_Id                  Int     @id @default(autoincrement())
  BI_Org_Type                String? @db.VarChar(255)
  BI_Org_name                String? @db.VarChar(255)
  BI_Org_Address             String? @db.VarChar(255)
  BI_Org_City                String? @db.VarChar(255)
  BI_Org_State               String? @db.Char(2)
  BI_Org_Zip                 String? @db.VarChar(10)
  BI_Org_Phone_Number        String? @db.VarChar(15)
  BI_Org_Director_First_Name String? @db.VarChar(255)
  BI_Org_Director_Last_Name  String? @db.VarChar(255)
}

model GAME_STATS_FOR_PLAYERS {
  game_stat_id                   Int     @id @default(0)
  game_stat_player_id            Int     @default(0)
  game_stat_player_jersey_number Int?
  game_stat_player_team_name     String? @db.VarChar(255)
  game_stat_opponent_team_name   String? @db.VarChar(255)
  game_stat_stat_count           String? @db.VarChar(255)
  game_stat_court_position_X     Float?  @db.Float
  game_stat_court_Position_Y     Float?  @db.Float
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model GAME_STATS_FOR_PLAYERS_ORIGINAL {
  id                   Int     @default(0)
  Player_Jersey_Number Int?
  Player_Team_Name     String? @db.VarChar(255)
  Opponent_Team_Name   String? @db.VarChar(255)
  Stats_Count          String? @db.VarChar(255)
  Court_Position_X     Float?  @db.Float
  Court_Position_Y     Float?  @db.Float

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model GAME_STATS_FOR_PLAYERS_TEMP1 {
  game_stat_id               Int     @default(0)
  game_info_id               Int     @default(0)
  player_information_id      Int     @default(0)
  game_stat_stat_count       String? @db.VarChar(255)
  game_stat_court_position_X Float?  @db.Float
  game_stat_court_Position_Y Float?  @db.Float

  @@ignore
}

model Game_INFO {
  Game_ID           Int       @id @default(autoincrement())
  Game_Date         DateTime? @db.Date
  Team1             String?   @db.VarChar(255)
  Team1LogoPic      String?   @db.VarChar(255)
  Team1ShotChartUrl String?   @db.VarChar(255)
  Team2             String?   @db.VarChar(255)
  Team2LogoPic      String?   @db.VarChar(255)
  Team2ShotChartUrl String?   @db.VarChar(255)
  GameName          String?   @db.VarChar(255)
  FinalScores       String?   @db.VarChar(255)
  VideoLinkUrl      String?   @db.VarChar(255)
}

model Player_INFO {
  Player_ID        Int      @id @default(autoincrement())
  SchoolName       String?  @db.VarChar(255)
  PlayerJerseyNo   Int?
  PlayerFirstName  String?  @db.VarChar(255)
  PlayerLastName   String?  @db.VarChar(255)
  Height           Decimal? @db.Decimal(5, 2)
  YearOfGraduation Int?     @db.Year
  Position         String?  @db.VarChar(50)
  PlayerPictureURL String?  @db.VarChar(255)
}

model Player_Stats_Info {
  Playerstats_ID          Int      @id @default(autoincrement())
  Team1                   String?  @db.VarChar(255)
  Team1PlayerJerseyNumber Int?
  Team2                   String?  @db.VarChar(255)
  Stats                   String?  @db.Text
  Action_Flag             Int?
  Court_Position_X        Decimal? @db.Decimal(10, 2)
  Court_Position_Y        Decimal? @db.Decimal(10, 2)
}

model access_tokens {
  id             String           @id @db.VarChar(255)
  userId         Int?             @db.UnsignedInt
  revoked        Boolean?         @default(false)
  createdAt      DateTime?        @default(now()) @db.Timestamp(0)
  updatedAt      DateTime?        @default(now()) @db.Timestamp(0)
  expiresAt      DateTime?        @db.Timestamp(0)
  users          users?           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "access_tokens_userid_foreign")
  refresh_tokens refresh_tokens[]

  @@index([userId], map: "access_tokens_userid_foreign")
}

model app_versions {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  minVersion    String?   @db.VarChar(255)
  latestVersion String?   @db.VarChar(255)
  type          String?   @db.VarChar(255)
  appLink       String?   @db.VarChar(255)
  createdAt     DateTime? @default(now()) @db.Timestamp(0)
  updatedAt     DateTime? @db.Timestamp(0)
  bundleId      String?   @db.VarChar(255)
}

model basketball_active_player {
  id                 BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  userId             Int?                @db.UnsignedInt
  playerId           BigInt?             @db.UnsignedBigInt
  matchId            BigInt?             @db.UnsignedBigInt
  teamId             BigInt?             @db.UnsignedBigInt
  position           Int?
  createdAt          DateTime?           @default(now()) @db.Timestamp(0)
  updatedAt          DateTime?           @default(now()) @db.Timestamp(0)
  basketball_match   basketball_match?   @relation(fields: [matchId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "basketball_active_player_matchid_foreign")
  basketball_players basketball_players? @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "basketball_active_player_playerid_foreign")
  basketball_teams   basketball_teams?   @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "basketball_active_player_teamid_foreign")
  users              users?              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "basketball_active_player_userid_foreign")

  @@index([matchId], map: "basketball_active_player_matchid_index")
  @@index([playerId], map: "basketball_active_player_playerid_index")
  @@index([teamId], map: "basketball_active_player_teamid_index")
  @@index([userId], map: "basketball_active_player_userid_index")
}

model basketball_match {
  id                                                        BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  userId                                                    Int?                       @db.UnsignedInt
  name                                                      String?                    @db.VarChar(255)
  team1                                                     BigInt?                    @db.UnsignedBigInt
  team2                                                     BigInt?                    @db.UnsignedBigInt
  sport                                                     String?                    @db.VarChar(255)
  matchDateTime                                             DateTime?                  @db.Timestamp(0)
  createdAt                                                 DateTime?                  @default(now()) @db.Timestamp(0)
  updatedAt                                                 DateTime?                  @default(now()) @db.Timestamp(0)
  status                                                    String?                    @db.VarChar(255)
  matchSecond                                               Int?
  basketball_active_player                                  basketball_active_player[]
  basketball_teams_basketball_match_team1Tobasketball_teams basketball_teams?          @relation("basketball_match_team1Tobasketball_teams", fields: [team1], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "basketball_match_team1_foreign")
  basketball_teams_basketball_match_team2Tobasketball_teams basketball_teams?          @relation("basketball_match_team2Tobasketball_teams", fields: [team2], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "basketball_match_team2_foreign")
  users                                                     users?                     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "basketball_match_userid_foreign")
  game_stats_table                                          game_stats_table[]

  @@index([team1], map: "basketball_match_team1_index")
  @@index([team2], map: "basketball_match_team2_index")
  @@index([userId], map: "basketball_match_userid_index")
}

model basketball_players {
  id                       BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  teamId                   BigInt?                    @db.UnsignedBigInt
  firstName                String?                    @db.VarChar(255)
  lastName                 String?                    @db.VarChar(255)
  jerseyNumber             String?                    @db.VarChar(255)
  position                 String?                    @db.VarChar(255)
  image                    String?                    @db.VarChar(255)
  createdAt                DateTime?                  @default(now()) @db.Timestamp(0)
  updatedAt                DateTime?                  @default(now()) @db.Timestamp(0)
  priority                 String?                    @db.VarChar(255)
  basketball_active_player basketball_active_player[]
  basketball_teams         basketball_teams?          @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "basketball_players_teamid_foreign")
  game_stats_table         game_stats_table[]

  @@index([teamId], map: "basketball_players_teamid_index")
}

model basketball_scoreboard {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  userId          Int?      @db.UnsignedInt
  matchId         Int?      @db.UnsignedInt
  teamId          BigInt?   @db.UnsignedBigInt
  playerId        BigInt?   @db.UnsignedBigInt
  position        String?   @db.VarChar(255)
  score           Int?
  attemptType     String?   @db.VarChar(255)
  action          String?   @db.VarChar(255)
  type            String?   @db.VarChar(255)
  playerPositionX String?   @db.VarChar(255)
  playerPositionY String?   @db.VarChar(255)
  createdAt       DateTime? @default(now()) @db.Timestamp(0)
  updatedAt       DateTime? @default(now()) @db.Timestamp(0)
  scoreTime       Int?
  users           users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "basketball_scoreboard_userid_foreign")

  @@index([matchId], map: "basketball_scoreboard_matchid_index")
  @@index([userId], map: "basketball_scoreboard_userid_index")
}

model basketball_stats {
  id                   Int     @id @default(autoincrement())
  Player_Jersey_Number Int?
  Player_Team_Name     String? @db.VarChar(255)
  Opponent_Team_Name   String? @db.VarChar(255)
  Stats_Count          String? @db.VarChar(255)
  Court_Position_X     Float?  @db.Float
  Court_Position_Y     Float?  @db.Float
}

model basketball_teams {
  id                                                        BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  userId                                                    Int?                       @db.UnsignedInt
  name                                                      String?                    @db.VarChar(255)
  logo                                                      String?                    @db.VarChar(255)
  createdAt                                                 DateTime?                  @default(now()) @db.Timestamp(0)
  updatedAt                                                 DateTime?                  @default(now()) @db.Timestamp(0)
  basketball_active_player                                  basketball_active_player[]
  basketball_match_basketball_match_team1Tobasketball_teams basketball_match[]         @relation("basketball_match_team1Tobasketball_teams")
  basketball_match_basketball_match_team2Tobasketball_teams basketball_match[]         @relation("basketball_match_team2Tobasketball_teams")
  basketball_players                                        basketball_players[]
  users                                                     users?                     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "basketball_teams_userid_foreign")
  game_stats_table                                          game_stats_table[]

  @@index([userId], map: "basketball_teams_userid_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model connections {
  id                                   Int       @id @default(autoincrement()) @db.UnsignedInt
  userId                               Int?      @db.UnsignedInt
  invitedUser                          Int?      @db.UnsignedInt
  status                               Int?
  createdAt                            DateTime? @default(now()) @db.Timestamp(0)
  updatedAt                            DateTime? @default(now()) @db.Timestamp(0)
  users_connections_invitedUserTousers users?    @relation("connections_invitedUserTousers", fields: [invitedUser], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "connections_inviteduser_foreign")
  users_connections_userIdTousers      users?    @relation("connections_userIdTousers", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "connections_userid_foreign")

  @@index([invitedUser], map: "connections_inviteduser_index")
  @@index([userId], map: "connections_userid_index")
}

model delete_account_after_subscription_ends {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  userId    Int       @db.UnsignedInt
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)
  users     users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "delete_account_after_subscription_ends_userid_foreign")

  @@index([userId], map: "delete_account_after_subscription_ends_userid_index")
}

model event {
  id        Int         @id @default(autoincrement()) @db.UnsignedInt
  image     String?     @db.VarChar(255)
  gameName  String?     @db.VarChar(255)
  url       String?     @db.VarChar(255)
  isdefault Int?
  createdAt DateTime?   @default(now()) @db.Timestamp(0)
  updatedAt DateTime?   @db.Timestamp(0)
  date      DateTime?   @db.Timestamp(0)
  showcases showcases[]
}

model fcm_tokens {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  userId    Int?      @db.UnsignedInt
  token     String?   @db.VarChar(255)
  deviceId  String?   @db.VarChar(255)
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)
  users     users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fcm_tokens_userid_foreign")

  @@index([userId], map: "fcm_tokens_userid_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model group_backup {
  id        Int       @default(0) @db.UnsignedInt
  name      String?   @db.VarChar(255)
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)
  createdby Int?      @db.UnsignedInt

  @@ignore
}

model group_members {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  userId    Int?      @db.UnsignedInt
  groupId   Int?      @db.UnsignedInt
  isAdmin   Boolean?  @default(false)
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)
  groups    groups?   @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "group_members_groupid_foreign")
  users     users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "group_members_userid_foreign")

  @@index([groupId], map: "group_members_groupid_index")
  @@index([userId], map: "group_members_userid_index")
}

model groups {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  name                  String?                 @db.VarChar(255)
  createdAt             DateTime?               @default(now()) @db.Timestamp(0)
  updatedAt             DateTime?               @default(now()) @db.Timestamp(0)
  createdby             Int?                    @db.UnsignedInt
  group_members         group_members[]
  users                 users?                  @relation(fields: [createdby], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "groups_createdby_foreign")
  shared_library_medias shared_library_medias[]
  shared_playlists      shared_playlists[]

  @@index([createdby], map: "groups_createdby_index")
}

model intros {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  title     String?   @db.VarChar(255)
  link      String?   @db.VarChar(255)
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
}

model knex_migrations {
  id             Int       @id @default(autoincrement()) @db.UnsignedInt
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamp(0)
}

model knex_migrations_lock {
  index     Int  @id @default(autoincrement()) @db.UnsignedInt
  is_locked Int?
}

model library_media_comments {
  id             Int            @id @default(autoincrement()) @db.UnsignedInt
  libraryMediaId Int            @db.UnsignedInt
  authorId       Int            @db.UnsignedInt
  comment        String?        @db.Text
  createdAt      DateTime?      @default(now()) @db.Timestamp(0)
  updatedAt      DateTime?      @default(now()) @db.Timestamp(0)
  users          users          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "library_media_comments_authorid_foreign")
  library_medias library_medias @relation(fields: [libraryMediaId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "library_media_comments_librarymediaid_foreign")

  @@index([authorId], map: "library_media_comments_authorid_index")
  @@index([libraryMediaId], map: "library_media_comments_librarymediaid_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model library_medias {
  id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
  userId                 Int?                     @db.UnsignedInt
  title                  String?                  @db.VarChar(255)
  media                  String?                  @db.VarChar(255)
  mediaType              Int?
  mediaThumbnail         String?                  @db.VarChar(255)
  seconds                Int?                     @default(0)
  playlistId             Int?                     @db.UnsignedInt
  deletedAt              DateTime?                @db.Timestamp(0)
  createdAt              DateTime?                @default(now()) @db.Timestamp(0)
  updatedAt              DateTime?                @default(now()) @db.Timestamp(0)
  description            String?                  @db.Text
  isEdited               Boolean?                 @default(false)
  editedMediasJson       String?                  @db.LongText
  library_media_comments library_media_comments[]
  playlists              playlists?               @relation(fields: [playlistId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "library_medias_playlistid_foreign")
  users                  users?                   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "library_medias_userid_foreign")
  library_tags           library_tags[]
  shared_library_medias  shared_library_medias[]

  @@index([playlistId], map: "library_medias_playlistid_index")
  @@index([userId], map: "library_medias_userid_index")
}

model library_tags {
  id             Int             @id @default(autoincrement()) @db.UnsignedInt
  libraryMediaId Int?            @db.UnsignedInt
  tagId          Int?            @db.UnsignedInt
  createdAt      DateTime?       @default(now()) @db.Timestamp(0)
  updatedAt      DateTime?       @default(now()) @db.Timestamp(0)
  library_medias library_medias? @relation(fields: [libraryMediaId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "library_tags_librarymediaid_foreign")
  tags           tags?           @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "library_tags_tagid_foreign")

  @@index([libraryMediaId], map: "library_tags_librarymediaid_index")
  @@index([tagId], map: "library_tags_tagid_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model media_weblinks {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  createdBy   Int?      @db.UnsignedInt
  slug        String?   @unique(map: "media_weblinks_slug_unique") @db.VarChar(255)
  title       String?   @db.VarChar(255)
  media       String?   @db.VarChar(255)
  mediaType   Int?
  seconds     Int?      @default(0)
  description String?   @db.Text
  createdAt   DateTime? @default(now()) @db.Timestamp(0)
  updatedAt   DateTime? @default(now()) @db.Timestamp(0)
  users       users?    @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "media_weblinks_createdby_foreign")

  @@index([createdBy], map: "media_weblinks_createdby_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model notifications {
  id                                    Int       @id @default(autoincrement()) @db.UnsignedInt
  userId                                Int       @db.UnsignedInt
  authUserId                            Int       @db.UnsignedInt
  message                               String?   @db.Text
  notificationType                      Int?
  readAt                                DateTime? @db.Timestamp(0)
  referenceId                           Int?
  createdAt                             DateTime? @default(now()) @db.Timestamp(0)
  updatedAt                             DateTime? @default(now()) @db.Timestamp(0)
  users_notifications_authUserIdTousers users     @relation("notifications_authUserIdTousers", fields: [authUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_authuserid_foreign")
  users_notifications_userIdTousers     users     @relation("notifications_userIdTousers", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_userid_foreign")

  @@index([authUserId], map: "notifications_authuserid_index")
  @@index([userId], map: "notifications_userid_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String?   @db.VarChar(255)
  token      String?   @db.Text
  created_at DateTime? @default(now()) @db.Timestamp(0)

  @@ignore
}

model player_information {
  id                 Int      @id @default(autoincrement())
  School_Name        String?  @db.VarChar(255)
  Player_Jersey_No   Int?
  Player_First_Name  String?  @db.VarChar(255)
  Player_Last_Name   String?  @db.VarChar(255)
  Height             Decimal? @db.Decimal(3, 1)
  Year_of_Graduation Int?
  Position           String?  @db.VarChar(255)
  Player_Picture_URL String?  @db.VarChar(500)
}

model playlist_tags {
  id         Int        @id @default(autoincrement()) @db.UnsignedInt
  playlistId Int?       @db.UnsignedInt
  tagId      Int?       @db.UnsignedInt
  createdAt  DateTime?  @default(now()) @db.Timestamp(0)
  updatedAt  DateTime?  @default(now()) @db.Timestamp(0)
  playlists  playlists? @relation(fields: [playlistId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "playlist_tags_playlistid_foreign")
  tags       tags?      @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "playlist_tags_tagid_foreign")

  @@index([playlistId], map: "playlist_tags_playlistid_index")
  @@index([tagId], map: "playlist_tags_tagid_index")
}

model playlists {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  userId           Int?               @db.UnsignedInt
  name             String?            @db.VarChar(255)
  createdAt        DateTime?          @default(now()) @db.Timestamp(0)
  updatedAt        DateTime?          @default(now()) @db.Timestamp(0)
  library_medias   library_medias[]
  playlist_tags    playlist_tags[]
  users            users?             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "playlists_userid_foreign")
  shared_playlists shared_playlists[]

  @@index([userId], map: "playlists_userid_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model products {
  id                          Int                  @id @default(autoincrement()) @db.UnsignedInt
  productKey                  String?              @db.VarChar(255)
  title                       String?              @db.VarChar(255)
  price                       Decimal?             @db.Decimal(15, 2)
  duration                    Int?                 @default(1)
  currency                    String?              @default("$") @db.VarChar(255)
  planType                    products_planType?
  platform                    products_platform?
  isAllowRecordingAndUpload   Boolean?             @default(false)
  isAllowAutoRecord           Boolean?             @default(false)
  isAllowConnectAndShare      Boolean?             @default(false)
  isAllowEditTool             Boolean?             @default(false)
  isAllowToStitchClips        Boolean?             @default(false)
  isAllowToDownloadClips      Boolean?             @default(false)
  isAllowToShareOnSocialMedia Boolean?             @default(false)
  isAllowPostureAnalysis      Boolean?             @default(false)
  createdAt                   DateTime?            @default(now()) @db.Timestamp(0)
  updatedAt                   DateTime?            @default(now()) @db.Timestamp(0)
  user_subscriptions          user_subscriptions[]
}

model refresh_tokens {
  id            String         @id @db.VarChar(255)
  accessTokenId String?        @db.VarChar(255)
  revoked       Boolean?       @default(false)
  expiresAt     DateTime?      @db.Timestamp(0)
  access_tokens access_tokens? @relation(fields: [accessTokenId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "refresh_tokens_accesstokenid_foreign")

  @@index([accessTokenId], map: "refresh_tokens_accesstokenid_foreign")
}

model shared_library_medias {
  id                     Int             @id @default(autoincrement()) @db.UnsignedInt
  libraryMediaId         Int?            @db.UnsignedInt
  userId                 Int             @db.UnsignedInt
  groupId                Int?            @db.UnsignedInt
  createdAt              DateTime?       @default(now()) @db.Timestamp(0)
  updatedAt              DateTime?       @default(now()) @db.Timestamp(0)
  isAllowedToEditByOwner Boolean?        @default(false)
  groups                 groups?         @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "shared_library_medias_groupid_foreign")
  library_medias         library_medias? @relation(fields: [libraryMediaId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "shared_library_medias_librarymediaid_foreign")
  users                  users           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "shared_library_medias_userid_foreign")

  @@index([groupId], map: "shared_library_medias_groupid_index")
  @@index([libraryMediaId], map: "shared_library_medias_librarymediaid_index")
  @@index([userId], map: "shared_library_medias_userid_index")
}

model shared_playlists {
  id                     Int        @id @default(autoincrement()) @db.UnsignedInt
  playlistId             Int?       @db.UnsignedInt
  userId                 Int        @db.UnsignedInt
  groupId                Int?       @db.UnsignedInt
  createdAt              DateTime?  @default(now()) @db.Timestamp(0)
  updatedAt              DateTime?  @default(now()) @db.Timestamp(0)
  isAllowedToEditByOwner Boolean?   @default(false)
  groups                 groups?    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "shared_playlists_groupid_foreign")
  playlists              playlists? @relation(fields: [playlistId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "shared_playlists_playlistid_foreign")
  users                  users      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "shared_playlists_userid_foreign")

  @@index([groupId], map: "shared_playlists_groupid_index")
  @@index([playlistId], map: "shared_playlists_playlistid_index")
  @@index([userId], map: "shared_playlists_userid_index")
}

model showcases {
  id        BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  userId    Int?            @db.UnsignedInt
  image     String?         @db.VarChar(255)
  gameName  String?         @db.VarChar(255)
  url       String?         @db.VarChar(255)
  type      showcases_type?
  createdAt DateTime?       @default(now()) @db.Timestamp(0)
  updatedAt DateTime?       @db.Timestamp(0)
  eventId   Int?            @db.UnsignedInt
  event     event?          @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "showcases_eventid_foreign")
  users     users?          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "showcases_userid_foreign")

  @@index([eventId], map: "showcases_eventid_index")
  @@index([userId], map: "showcases_userid_index")
}

model sms_game_info {
  game_id                            Int       @id @default(0)
  game_date                          DateTime? @db.Date
  player_team_name                   String?   @db.VarChar(255)
  player_team_name_pic               String?   @db.VarChar(255)
  player_team_shotchart_url          String?   @db.VarChar(255)
  player_opponent_team_name          String?   @db.VarChar(255)
  player_opponent_team_pic           String?   @db.VarChar(255)
  player_opponent_team_shotchart_url String?   @db.VarChar(255)
  gamename                           String?   @db.VarChar(255)
  game_score                         String?   @db.VarChar(255)
  game_video_url                     String?   @db.VarChar(255)
}

model sms_player_stat_new {
  game_stat_id               Int     @id @default(autoincrement())
  game_info_id               Int?
  player_information_id      Int?
  game_stat_stat_count       String? @db.Text
  game_stat_court_position_X Float?  @db.Float
  game_stat_court_Position_Y Float?  @db.Float
}

model stitch_hist {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  userId        Int?      @db.UnsignedInt
  playlistId    Int?      @db.UnsignedInt
  group_id      Int?      @db.UnsignedInt
  createdAt     DateTime? @default(now()) @db.Timestamp(0)
  stitch_status String?   @db.VarChar(255)

  @@unique([userId, playlistId, group_id], map: "stitch_hist_unique_userId_playlistId_group_id_index")
  @@index([createdAt, stitch_status], map: "stitch_hist_createdby_index")
}

model tags {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  name          String?         @db.VarChar(255)
  library_tags  library_tags[]
  playlist_tags playlist_tags[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model test {
  player            String? @db.Text
  user_team         String? @db.Text
  opp_team          String? @db.Text
  stat              String? @db.Text
  created_at        String? @db.Text
  lineup            String? @db.Text
  lineup_created_at String? @db.Text
  time_period       Int?
  is_opp            Int?
  player_id         String? @db.Text
  game_id           String? @db.Text
  team_id           String? @db.Text
  opp_id            String? @db.Text
  court_pos_x       String? @db.Text
  court_pos_y       String? @db.Text

  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_subscriptions {
  id                    Int       @id @default(autoincrement()) @db.UnsignedInt
  productId             Int?      @db.UnsignedInt
  userId                Int?      @db.UnsignedInt
  purchaseToken         String?   @db.Text
  orderId               String?   @db.VarChar(255)
  originalTransactionId String?   @db.VarChar(255)
  purchasedAt           DateTime? @db.Timestamp(0)
  expireAt              DateTime? @db.Timestamp(0)
  purchaseState         String?   @db.VarChar(255)
  autoRenewing          String?   @db.VarChar(255)
  isTrial               Boolean?  @default(true)
  receipt               Json?
  isTestEnvironment     Boolean?
  cancelledAt           DateTime? @db.Timestamp(0)
  createdAt             DateTime? @default(now()) @db.Timestamp(0)
  updatedAt             DateTime? @default(now()) @db.Timestamp(0)
  products              products? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_subscriptions_productid_foreign")
  users                 users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_subscriptions_userid_foreign")

  @@index([productId], map: "user_subscriptions_productid_index")
  @@index([userId], map: "user_subscriptions_userid_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id                                            Int                                      @id @default(autoincrement()) @db.UnsignedInt
  email                                         String?                                  @unique(map: "users_email_unique") @db.VarChar(255)
  phone                                         String?                                  @unique(map: "users_phone_unique") @db.VarChar(255)
  password                                      String?                                  @db.VarChar(255)
  emailVerifiedAt                               DateTime?                                @db.Timestamp(0)
  firstName                                     String?                                  @db.VarChar(255)
  lastName                                      String?                                  @db.VarChar(255)
  profilePicture                                String?                                  @db.VarChar(255)
  aboutMe                                       String?                                  @db.VarChar(255)
  backgroundMedia                               String?                                  @db.VarChar(1000)
  backgroundMediaType                           Int?
  backgroundMediaThumbnail                      String?                                  @db.VarChar(1000)
  socialEmail                                   String?                                  @db.VarChar(255)
  providerType                                  String?                                  @db.VarChar(255)
  providerId                                    String?                                  @db.VarChar(255)
  createdAt                                     DateTime?                                @default(now()) @db.Timestamp(0)
  updatedAt                                     DateTime?                                @db.Timestamp(0)
  lastAppAccessTime                             DateTime?                                @default(now()) @db.Timestamp(0)
  skillteckUserId                               Int?
  isShowSubscriptionPopUp                       Boolean?                                 @default(false)
  access_tokens                                 access_tokens[]
  basketball_active_player                      basketball_active_player[]
  basketball_match                              basketball_match[]
  basketball_scoreboard                         basketball_scoreboard[]
  basketball_teams                              basketball_teams[]
  connections_connections_invitedUserTousers    connections[]                            @relation("connections_invitedUserTousers")
  connections_connections_userIdTousers         connections[]                            @relation("connections_userIdTousers")
  delete_account_after_subscription_ends        delete_account_after_subscription_ends[]
  fcm_tokens                                    fcm_tokens[]
  game_stats_table                              game_stats_table[]
  group_members                                 group_members[]
  groups                                        groups[]
  library_media_comments                        library_media_comments[]
  library_medias                                library_medias[]
  media_weblinks                                media_weblinks[]
  notifications_notifications_authUserIdTousers notifications[]                          @relation("notifications_authUserIdTousers")
  notifications_notifications_userIdTousers     notifications[]                          @relation("notifications_userIdTousers")
  playlists                                     playlists[]
  shared_library_medias                         shared_library_medias[]
  shared_playlists                              shared_playlists[]
  showcases                                     showcases[]
  user_subscriptions                            user_subscriptions[]
}

model org_type {
  org_type_obj_id Int    @id @default(autoincrement())
  org_type_id     Int
  org_type_name   String @db.VarChar(255)
}

model sms_event {
  event_id                 Int       @id @default(autoincrement())
  event_org_id             Int?
  event_name               String?   @db.VarChar(255)
  event_url                String?   @db.VarChar(500)
  event_start_date         DateTime? @db.DateTime(0)
  event_end_date           DateTime? @db.DateTime(0)
  event_manager_first_name String?   @db.VarChar(255)
  event_manager_last_name  String?   @db.VarChar(255)
  event_manager_email      String?   @db.VarChar(255)
  event_instagram          String?   @db.VarChar(255)
  event_twitter            String?   @db.VarChar(255)
  event_youtube            String?   @db.VarChar(255)
  event_facebook           String?   @db.VarChar(255)
  event_affiliation_flag   String?   @db.Text
}

model sms_game_detail {
  game_id        Int       @id @default(autoincrement())
  game_event_id  Int?
  game_team1_id  Int?
  game_team2_id  Int?
  game_date      DateTime? @db.Date
  game_time      DateTime? @db.Time(0)
  game_name_cal  String?   @db.VarChar(255)
  game_score     String?   @db.VarChar(255)
  game_video_url String?   @db.VarChar(255)
}

model sms_news {
  news_id          Int     @id @default(autoincrement())
  news_game_id     Int?
  news_team_id     Int?
  news_user_id     Int?
  news_title       String? @db.VarChar(255)
  news_description String? @db.Text
  news_web_article String? @db.VarChar(255)
  news_pic         String? @db.VarChar(255)
  news_video_link  String? @db.VarChar(255)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model sms_org_type {
  org_type_id   Int?
  org_type_name String? @db.Text

  @@ignore
}

model sms_organizations {
  Org_id               Int     @id @default(autoincrement())
  org_org_type_id      Int?
  org_name             String? @db.VarChar(255)
  org_logo_pic         String? @db.VarChar(255)
  org_address          String? @db.VarChar(255)
  org_city             String? @db.VarChar(255)
  org_state            String? @db.VarChar(255)
  org_zip              String? @db.VarChar(20)
  org_phone_number     String? @db.VarChar(20)
  org_owner_first_name String? @db.VarChar(255)
  org_owner_last_name  String? @db.VarChar(255)
}

model sms_report {
  report_id                   Int     @id @default(autoincrement())
  report_game_id              Int?
  report_team_id              Int?
  report_user_id              Int?
  report_summary              String? @db.Text
  report_strength             String? @db.Text
  report_areas_of_improvement String? @db.Text
}

model sms_tag {
  tag_id          Int     @id @default(autoincrement())
  tag_sms_user_id Int?
  tag_title       String? @db.VarChar(255)
  tag_description String? @db.Text
}

model sms_user {
  user_id                 Int      @id @default(autoincrement())
  user_APP_user_id        Int?
  user_user_type_id       Int?
  user_first_name         String?  @db.VarChar(255)
  user_last_name          String?  @db.VarChar(255)
  user_pic_url            String?  @db.VarChar(500)
  user_about_me           String?  @db.Text
  user_name               String?  @db.VarChar(255)
  user_password           String?  @db.VarChar(255)
  user_emailverified_flag Boolean?
  user_address1           String?  @db.VarChar(255)
  user_address2           String?  @db.VarChar(255)
  user_city               String?  @db.VarChar(255)
  user_state              String?  @db.VarChar(255)
  user_zip                String?  @db.VarChar(20)
  user_phone_number       String?  @db.VarChar(20)
  user_instagram          String?  @db.VarChar(255)
  user_twitter            String?  @db.VarChar(255)
  user_youTube            String?  @db.VarChar(255)
  user_facebook           String?  @db.VarChar(255)
  user_jersey_no          Decimal? @db.Decimal(10, 0)
  user_year_of_graduation Decimal? @db.Decimal(10, 0)
  user_height             Decimal? @db.Decimal(5, 2)
  user_weight             Decimal? @db.Decimal(5, 2)
  user_position           String?  @db.VarChar(255)
  user_gpa                Decimal? @db.Decimal(3, 2)
  user_email              String?  @db.VarChar(255)
  user_firebase_id        String?  @unique(map: "user_firebase_id") @db.VarChar(255)
}

model sms_user_type {
  user_type_id   Int     @id @default(autoincrement())
  user_type_name String? @db.VarChar(20)
}

model sms_game_stats {
  game_stats_id               Int     @id @default(autoincrement())
  game_stats_event_id         Int?    @default(4)
  game_stats_game_id          Int?
  game_stats_team_id          Int?    @default(1)
  game_stats_video_url        String? @db.VarChar(255)
  game_stats_fg               String? @db.Text
  game_stats_fg_percentage    Float?  @db.Float
  game_stats_3pt              String? @db.Text
  game_stats_3p_percentage    Float?  @db.Float
  game_stats_ft               String? @db.Text
  game_stats_ft_percentage    Float?  @db.Float
  game_stats_def_rebound_dreb Int?
  game_stats_off_rebound_oreb Int?
  game_stats_foul             Int?
  game_stats_steal_stl        Int?
  game_stats_turnover_to      Int?
  game_stats_block_blk        Int?
  game_stats_assist_asst      Int?
  game_stats_plusminus        Int?
  game_stats_minutes          Int?
  game_stats_total_points     Int?
}

model sms_team_roster {
  team_roster_id      Int  @id @default(autoincrement())
  team_roster_user_id Int
  team_roster_team_id Int
  team_roster_org_id  Int?
}

model sms_player_stats {
  player_stats_id               Int     @id @default(autoincrement())
  player_stats_event_id         Int?
  player_stats_game_id          Int?
  player_stats_team_id          Int?
  player_stats_user_id          Int?
  player_stats_video_url        String? @db.VarChar(255)
  player_stats_fg               String? @db.Text
  player_stats_fg_percentage    Float?  @db.Float
  player_stats_3pt              String? @db.Text
  player_stats_3p_percentage    Float?  @db.Float
  player_stats_ft               String? @db.Text
  player_stats_ft_percentage    Float?  @db.Float
  player_stats_def_rebound_dreb Int?
  player_stats_off_rebound_oreb Int?
  player_stats_foul             Int?
  player_stats_steal_stl        Int?
  player_stats_turnover_to      Int?
  player_stats_block_blk        Int?
  player_stats_assist_asst      Int?
  player_stats_plusminus        Int?
  player_stats_minutes          Int?
  player_stats_total_points     Int?
}

model sms_team {
  team_id              Int     @id @default(autoincrement())
  team_organisation_id Int?
  team_name            String? @db.VarChar(255)
  team_log_url         String? @db.VarChar(500)
  team_instagram       String? @db.VarChar(255)
  team_twitter         String? @db.VarChar(255)
  team_youtube         String? @db.VarChar(255)
  team_facebook        String? @db.VarChar(255)
  team_affiliation     String? @db.Text
}

model game_stats_table {
  game_stats_id                BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  game_stats_user_Id           Int?                @db.UnsignedInt
  game_stats_game_id           BigInt?             @db.UnsignedBigInt
  game_stats_team_id           BigInt?             @db.UnsignedBigInt
  team_user_id                 BigInt?             @db.UnsignedBigInt
  game_stats_dev_type          String?             @db.VarChar(255)
  game_stats_xposition         Decimal?            @db.Decimal(8, 2)
  game_stats_yposition         Decimal?            @db.Decimal(8, 2)
  game_stats_scoretime         BigInt?
  game_stats_def_rebounds_dreb Boolean?
  game_stats_turnover_to       Boolean?
  game_stats_assist_asst       Boolean?
  game_stats_foul              Boolean?
  game_stats_steals_stl        Boolean?
  game_stats_blocks_blk        Boolean?
  game_stats_miss              Boolean?
  game_stats_make              Boolean?
  game_stats_1point            Boolean?
  game_stats_2point            Boolean?
  game_stats_3point            Boolean?
  game_stats_create_date       DateTime?           @default(now()) @db.Timestamp(0)
  game_stats_update_date       DateTime?           @default(now()) @db.Timestamp(0)
  basketball_match             basketball_match?   @relation(fields: [game_stats_game_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "game_stats_table_game_stats_game_id_foreign")
  basketball_teams             basketball_teams?   @relation(fields: [game_stats_team_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "game_stats_table_game_stats_team_id_foreign")
  users                        users?              @relation(fields: [game_stats_user_Id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "game_stats_table_game_stats_user_id_foreign")
  basketball_players           basketball_players? @relation(fields: [team_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "game_stats_table_team_user_id_foreign")

  @@index([game_stats_game_id], map: "game_stats_table_game_stats_game_id_index")
  @@index([game_stats_team_id], map: "game_stats_table_game_stats_team_id_index")
  @@index([game_stats_user_Id], map: "game_stats_table_game_stats_user_id_index")
  @@index([team_user_id], map: "game_stats_table_team_user_id_index")
}

model sms_detail_stats {
  detail_stats_id        Int      @id @default(autoincrement())
  detail_stats_event_id  Int?
  detail_stats_game_id   Int?
  detail_stats_team_id   Int?
  detail_stats_user_id   Int?
  detail_stats_miss      Int?
  detail_stats_make      Int?
  detail_stats_freethrow Int?
  detail_stats_2pt       Int?
  detail_stats_3pt       Int?
  detail_stats_xcord     Decimal? @db.Decimal(10, 2)
  detail_stats_ycord     Decimal? @db.Decimal(10, 2)
  detail_stats_dreb      Int?
  detail_stats_oreb      Int?
  detail_stats_foul      Int?
  detail_stats_stl       Int?
  detail_stats_to        Int?
  detail_stats_blk       Int?
  detail_stats_asst      Int?
  detail_stats_video_url String?  @db.VarChar(255)
}

enum showcases_type {
  stats
  video
}

enum products_planType {
  basic
  pro
}

enum products_platform {
  Android
  iOS
}
